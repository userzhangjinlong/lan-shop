<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Ramsey\Uuid\Uuid;

class Order extends Model
{
    const REFUND_STATUS_PENDING = 'pending';
    const REFUND_STATUS_APPLIED = 'applied';
    const REFUND_STATUS_PROCESSING = 'processing';
    const REFUND_STATUS_SUCCESS = 'success';
    const REFUND_STATUS_FAILED = 'failed';

    const SHIP_STATUS_PENDING = 'pending';
    const SHIP_STATUS_DELIVERED = 'delivered';
    const SHIP_STATUS_RECEIVED = 'received';

    const TYPE_NORMAL = 'normal';
    const TYPE_CROWDFUNDING = 'crowdfunding';
    const TYPE_SECKILL = 'seckill';

    /**
     * @var array
     */
    public static $refundStatusMap = [
        self::REFUND_STATUS_PENDING => '未退款',
        self::REFUND_STATUS_APPLIED => '已申请退款',
        self::REFUND_STATUS_PROCESSING => '退款中',
        self::REFUND_STATUS_SUCCESS => '退款成功',
        self::REFUND_STATUS_FAILED => '退款失败'
    ];

    /**
     * @var array
     */
    public static $shipStatusMap = [
        self::SHIP_STATUS_PENDING => '未发货',
        self::SHIP_STATUS_DELIVERED => '已发货',
        self::SHIP_STATUS_RECEIVED => '已收货'
    ];

    /**
     * @var array
     */
    public static $typeMap = [
        self::TYPE_NORMAL => '普通订单',
        self::TYPE_CROWDFUNDING => '众筹订单',
        self::TYPE_SECKILL => '秒杀订单',
    ];

    /**
     * @var array
     */
    protected $fillable = [
        'no', 'address', 'total_amount', 'remark', 'paid_at', 'coupon_code_id',
        'payment_method', 'payment_no', 'refund_status', 'refund_no', 'closed',
        'reviewed', 'ship_status', 'ship_data', 'extra', 'type'
    ];

    /**
     * @var array
     */
    protected $casts = [
        'closed'    =>  'boolean',
        'reviewed'  =>  'boolean',
        'address'   =>  'json',
        'ship_data' =>  'json',
        'extra'     =>  'json'
    ];

    /**
     * @var array
     */
    protected $dates = [
        'paid_at',
    ];

    /**
     * 默认订单创建首先生成订单号调用
     * 模型注册监听自动运行 boot() 方法中注册了一个模型创建事件监听函数，用于自动生成订单的流水号。
     */
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        //监听模型创建事件,在写入数据库之前触发
        static::creating(function ($model){
            //如果模型的no字段为空
            if (!$model->no){
                //调用findAvailableNo生成订单流水号
                $model->no = static::findAvailableNo();
                //如果生成失败则终止创建
                if (!$model->no){
                    return false;
                }
            }
        });
    }

    /**
     * 订单号生成
     * @return bool|string
     * @throws \Exception
     */
    public static function findAvailableNo()
    {
        //订单流水号前缀
        $prefix = date('YmdHis');
        for ($i=0;$i<10;$i++){
            //随机生成的6位数字
            $no = $prefix.str_pad(random_int(0,999999),6, '0', STR_PAD_LEFT);

            //判断是否已经存在
            if (!static::query()->where('no', $no)->exists()){
                return $no;
            }

        }

        \Log::warning('订单未能创建成功');
        return false;
    }

    /**
     * 订单属于一个用户
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user(){
        return $this->belongsTo(User::class);
    }

    /**
     * 一个订单对应一个或多个购物车商品
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function items(){
        return $this->hasMany(OrderItem::class);
    }

    public static function getAvailableRefundNo(){
        do{
            //Uuid可以用来生成大概率不重复的字符串
            $no = Uuid::uuid4()->getHex();
        }while(self::query()->where('refund_no', $no)->exists());

        return $no;
    }

    /**
     * 订单关联优惠券
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function couponCode(){
        return $this->belongsTo(CouponCode::class);
    }

}
